{"version":3,"sources":["../src/lib/matrices.ts","../src/lib/vec.ts","../src/lib/xy-point-helpers.ts"],"sourcesContent":["import { range } from 'd3';\n\nexport class Matrix extends Array<number[]> {\n\tstatic fromDomMatrix(input: DOMMatrix) {\n\t\tif (!input.is2D) throw new Error(`3D matrices are not supported`);\n\t\treturn new this([\n\t\t\t[input.a, input.c, input.e],\n\t\t\t[input.b, input.d, input.f],\n\t\t]);\n\t}\n\n\tnumRows: number;\n\tnumCols: number;\n\n\tconstructor(data: number[][]) {\n\t\tsuper(0);\n\t\tthis.numCols = data[0].length;\n\t\tthis.numRows = data.length;\n\t\tif (data.some((row) => row.length !== this.numCols)) {\n\t\t\tconsole.error(data);\n\t\t\tthrow new Error(`import misssized`);\n\t\t}\n\n\t\tfor (let i = 0; i < this.numRows; i++) {\n\t\t\tthis[i] = [];\n\t\t\tfor (let j = 0; j < this.numCols; j++) {\n\t\t\t\tthis[i][j] = data[i][j];\n\t\t\t}\n\t\t}\n\t}\n\n\tmapMatrix(func: (v: number, x: number, y: number) => number) {\n\t\tconst output: number[][] = [];\n\t\tfor (let r = 0; r < this.numRows; r++) {\n\t\t\toutput[r] = [];\n\t\t\tfor (let c = 0; c < this.numCols; c++) {\n\t\t\t\toutput[r][c] = func(this[r][c], c, r);\n\t\t\t}\n\t\t}\n\n\t\treturn new Matrix(output);\n\t}\n\n\tsetPos(newValue: number, col: number, row: number) {\n\t\tif (col >= this.numCols)\n\t\t\tthrow new Error(\n\t\t\t\t`col ${col} is larger then matrix size of ${this.numCols}`,\n\t\t\t);\n\t\tif (row >= this.numRows)\n\t\t\tthrow new Error(\n\t\t\t\t`col ${row} is larger then matrix size of ${this.numRows}`,\n\t\t\t);\n\t\tconst op = new Matrix(this);\n\t\top[row][col] = newValue;\n\t\treturn op;\n\t}\n\n\tmul(other: Matrix) {\n\t\tif (other.numRows !== this.numCols)\n\t\t\tthrow new Error(`number of columns in the first matrix (${this.numCols}) should be\n    the same as the number of rows in the second${other.numRows}`);\n\t\tconst productRow = range(other.numCols).fill(0);\n\t\tconst product: number[][] = [];\n\t\tfor (let p = 0; p < this.numRows; p++) {\n\t\t\tproduct[p] = productRow.slice();\n\t\t}\n\n\t\tfor (let i = 0; i < this.numRows; i++)\n\t\t\tfor (let j = 0; j < other.numCols; j++)\n\t\t\t\tfor (let k = 0; k < this.numCols; k++) {\n\t\t\t\t\tproduct[i][j] += this[i][k] * other[k][j];\n\t\t\t\t}\n\n\t\treturn new Matrix(product);\n\t}\n}\n","import { Matrix } from './matrices';\n\nconst PI = Math.PI;\nconst TAU = PI * 2;\nconst DEG = 180 / PI;\nconst { sin, cos, atan2, round, abs } = Math;\nconst EPSILON = 1e-6;\ntype Point = [number, number];\nexport type TransformMatrix = [\n\t[number, number, number],\n\t[number, number, number],\n];\nexport type Vp = Point | number[];\n\nconst pointConstructor: new (...p: [number, number]) => [number, number] =\n\tArray as any;\nexport class Vec extends pointConstructor implements Point, Array<number> {\n\tstatic fromObject(input: { x: number; y: number }) {\n\t\treturn new Vec([input.x, input.y]);\n\t}\n\n\tstatic rad2deg(r: number) {\n\t\treturn r * DEG;\n\t}\n\n\tstatic deg2rad(d: number) {\n\t\treturn d / DEG;\n\t}\n\n\tstatic determinate(i: Vec, j: Vec) {\n\t\t/* Matrix is  =\n    | i.x  j.x |\n    | i.y  j.y |\n\n    det is equal to (i.x)(j.y) - (j.x)(i.y)\n     */\n\t\treturn i.x * j.y - j.x * i.y;\n\t}\n\n\tstatic direction(i: Vec, j: Vec, k: Vec) {\n\t\treturn Math.sign(Vec.determinate(k.sub(i), j.sub(i)));\n\t}\n\n\tstatic lerp(p0: Vp, p1: Vp, t: number) {\n\t\treturn new Vec(p0).add(new Vec(p1).sub(p0).mul(t));\n\t}\n\n\tstatic distance(a: Vec, b: Vec) {\n\t\treturn a.dist(b);\n\t}\n\n\tget x() {\n\t\treturn this[0];\n\t}\n\n\tget y() {\n\t\treturn this[1];\n\t}\n\n\tconstructor(x: number, y: number);\n\tconstructor(input: Vp);\n\tconstructor(a: Vp | number, b?: number) {\n\t\tif (typeof a === 'number' && typeof b === 'number') {\n\t\t\tsuper(a, b);\n\t\t} else if (Array.isArray(a)) {\n\t\t\tsuper(a[0] ?? 0, a[1] ?? 0);\n\t\t} else {\n\t\t\tsuper(0, 0);\n\t\t}\n\t}\n\n\t*[Symbol.iterator]() {\n\t\tyield this[0];\n\t\tyield this[1];\n\t\treturn undefined;\n\t}\n\n\tmagnitude() {\n\t\treturn this.len();\n\t}\n\n\tupdateX(nx: number) {\n\t\treturn new Vec(nx, this.y);\n\t}\n\n\tupdateY(ny: number) {\n\t\treturn new Vec(this.x, ny);\n\t}\n\n\tget tup() {\n\t\treturn new Vec(this.x, this.y) as readonly [x: number, y: number];\n\t}\n\n\tadd(no: number): Vec;\n\tadd(vec: Vp): Vec;\n\tadd(inp: Vp | number) {\n\t\tif (typeof inp === 'number') return new Vec(this.x + inp, this.y + inp);\n\t\treturn new Vec(this.x + inp[0], this.y + inp[1]);\n\t}\n\n\tsub(no: number): Vec;\n\tsub(vec: Vp): Vec;\n\tsub(inp: Vp | number) {\n\t\tif (typeof inp === 'number') return new Vec(this.x - inp, this.y - inp);\n\t\treturn new Vec(this.x - inp[0], this.y - inp[1]);\n\t}\n\n\tmul(no: number): Vec;\n\tmul(vec: Vp): Vec;\n\tmul(inp: Vp | number) {\n\t\tif (typeof inp === 'number') return new Vec(this.x * inp, this.y * inp);\n\t\treturn new Vec(this.x * inp[0], this.y * inp[1]);\n\t}\n\n\ttransformMatrix(mat: Matrix) {\n\t\tif (mat.numCols !== 2 || mat.numRows > 2 || mat.numRows === 1) {\n\t\t\tthrow new Error(`matrix misssized`);\n\t\t}\n\n\t\tconst is3 = mat.numRows === 3;\n\t\tconst vecMatForm = is3\n\t\t\t? new Matrix([[this.x], [this.y], [1]])\n\t\t\t: new Matrix([[this.x], [this.y]]);\n\t\tconst result = mat.mul(vecMatForm);\n\t\treturn new Vec(result[0][0], result[0][1]);\n\t}\n\n\tdiv(no: number): Vec;\n\tdiv(vec: Vp): Vec;\n\tdiv(inp: Vp | number) {\n\t\tif (typeof inp === 'number') {\n\t\t\tif (inp === 0) return new Vec(0, 0);\n\t\t\treturn new Vec(this.x / inp, this.y / inp);\n\t\t}\n\n\t\tconst nx = inp[0] === 0 ? 0 : this.x / inp[0];\n\t\tconst ny = inp[1] === 0 ? 0 : this.y / inp[1];\n\t\treturn new Vec(nx, ny);\n\t}\n\n\tperpendicular(useX = false) {\n\t\tif (useX) {\n\t\t\treturn this.invertX();\n\t\t}\n\n\t\treturn this.invertY();\n\t}\n\n\tsetLength(length: number) {\n\t\tconst ang = this.angle();\n\t\treturn this._update(cos(ang), sin(ang)).mul(length);\n\t}\n\n\tclampLength(length: number) {\n\t\tif (this.magnitude() > length) return this.setLength(length);\n\t\treturn this;\n\t}\n\n\tinvertX() {\n\t\treturn this.mul([-1, 1]);\n\t}\n\n\tinvertY() {\n\t\treturn this.mul([1, -1]);\n\t}\n\n\tinvert() {\n\t\treturn this.mul(-1);\n\t}\n\n\tround() {\n\t\treturn this._update(round(this.x), round(this.y));\n\t}\n\n\tmixX(inp: Vp, amnt = 0.5) {\n\t\tconst nx = (1 - amnt) * this.x + amnt * inp[0];\n\t\treturn this.updateX(nx);\n\t}\n\n\tmixY(inp: Vp, amnt = 0.5) {\n\t\tconst ny = (1 - amnt) * this.y + amnt * inp[1];\n\t\treturn this.updateY(ny);\n\t}\n\n\tmix(inp: Vp, amnt = 0.5) {\n\t\tconst nx = (1 - amnt) * this.x + amnt * inp[0];\n\t\tconst ny = (1 - amnt) * this.y + amnt * inp[1];\n\t\treturn this._update(nx, ny);\n\t}\n\n\t/**\n\t* @description Clones vec\n\t* @returns  vec\n    @deprecated\n\t*/\n\tclone() {\n\t\treturn new Vec(this);\n\t}\n\n\tcall(functor: (n: number) => number): Vec;\n\tcall(xfunctor: (n: number) => number, yfunctor: (n: number) => number): Vec;\n\tcall(functor: (n: number) => number, b?: (n: number) => number) {\n\t\tif (b) {\n\t\t\treturn this._update(functor(this.x), b(this.y));\n\t\t}\n\n\t\treturn this._update(functor(this.x), functor(this.y));\n\t}\n\n\tdot(inp: Vp) {\n\t\treturn this.x * inp[0] + this.y * inp[1];\n\t}\n\n\tcross(inp: Vp) {\n\t\treturn Vec.determinate(this, new Vec(inp[0], inp[1]));\n\t}\n\n\tangle() {\n\t\tconst a = atan2(this.y, this.x);\n\t\treturn (TAU + a) % TAU;\n\t}\n\n\trotate(amt: number) {\n\t\tconst { x, y } = this;\n\t\tconst nx = x * cos(amt) - y * sin(amt);\n\t\tconst ny = x * sin(amt) + y * cos(amt);\n\t\treturn this._update(nx, ny);\n\t}\n\n\trotateTo(ang: number) {\n\t\treturn this.rotate(ang - this.angle());\n\t}\n\n\tdistSq(inp: Vp) {\n\t\tconst dx = this._distX(inp);\n\t\tconst dy = this._distY(inp);\n\t\treturn dx ** 2 + dy ** 2;\n\t}\n\n\tdist(inp: Vp) {\n\t\treturn Math.sqrt(this.distSq(inp));\n\t}\n\n\tmanhattenDist(inp: Vp) {\n\t\treturn abs(inp[0] - this.x) + abs(inp[1] - this.y);\n\t}\n\n\tisEqualTo(inp: Vp) {\n\t\treturn abs(inp[0] - this.x) < EPSILON && abs(inp[1] - this.y) < EPSILON;\n\t}\n\n\tangleBetween(inp: Vp) {\n\t\tconst [x2, y2] = inp;\n\t\tconst ang = Math.acos(\n\t\t\t(this.x * x2 + this.y * y2) / (this.len() * new Vec(x2, y2).len()),\n\t\t);\n\t\treturn ang;\n\t}\n\n\tlenSq() {\n\t\tconst { x, y } = this;\n\t\treturn x ** 2 + y ** 2;\n\t}\n\n\tlen() {\n\t\treturn Math.sqrt(this.lenSq());\n\t}\n\n\tlimitSq(max: number, value?: number) {\n\t\tvalue = value ?? max;\n\t\tif (this.lenSq() > max) {\n\t\t\treturn this.setLength(value);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tlimit(max: number, value?: number) {\n\t\tvalue = value ?? max;\n\t\tif (this.len() > max) {\n\t\t\treturn this.setLength(value);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tnorm() {\n\t\tconst length = this.len();\n\t\tif (length === 0) {\n\t\t\treturn this._update(1, 0);\n\t\t}\n\n\t\treturn this.div(length);\n\t}\n\n\ttoString(): string {\n\t\treturn `x:${this.x}, y:${this.y}`;\n\t}\n\n\tinspect(): string {\n\t\treturn this.toString();\n\t}\n\n\tprojectOn(inp: Vp) {\n\t\tconst [ix, iy] = inp;\n\t\tconst { x, y } = this;\n\t\tconst coeff = (x * ix + y * iy) / (ix * ix + iy * iy);\n\t\treturn new Vec(inp).mul(coeff);\n\t}\n\n\tisZero() {\n\t\treturn this.x === 0 && this.y === 0;\n\t}\n\n\tequals([ix, iy]: Vp) {\n\t\treturn this.x === ix && this.y === iy;\n\t}\n\n\tmatTransform(mat: TransformMatrix): Vec;\n\tmatTransform(\n\t\tu: number,\n\t\ti: number,\n\t\to: number,\n\t\tj: number,\n\t\tk: number,\n\t\tl: number,\n\t): Vec;\n\n\tmatTransform(...args: Array<number | TransformMatrix>) {\n\t\tif ((args[0] as TransformMatrix).length !== undefined) {\n\t\t\treturn this._matTransform(args[0] as TransformMatrix);\n\t\t}\n\n\t\tconst a = args as number[];\n\t\tconst tm: TransformMatrix = [\n\t\t\t[a[0], a[1], a[2]],\n\t\t\t[a[3], a[4], a[5]],\n\t\t];\n\t\treturn this._matTransform(tm);\n\t}\n\n\tprivate _update(x: number, y: number) {\n\t\treturn new Vec(x, y);\n\t}\n\n\tprivate _matTransform(mat: TransformMatrix) {\n\t\tconst x = mat[0][0] * this.x + mat[0][1] * this.y + mat[0][2];\n\t\tconst y = mat[1][0] * this.x + mat[1][1] * this.y + mat[1][2];\n\t\treturn new Vec(x, y);\n\t}\n\n\tprivate _distX(inp: Vp) {\n\t\treturn this.x - inp[0];\n\t}\n\n\tprivate _distY(inp: Vp) {\n\t\treturn this.y - inp[1];\n\t}\n}\n","import { type Vp, Vec } from './vec';\ntype XYPt = Readonly<{ x: number; y: number }>;\ntype ToXy = (pt: Vp) => XYPt;\ntype ToVec = (pt: XYPt) => Vec;\n\nexport function toXyFactory(factor = 100_000) {\n\tconst ft = factor;\n\tconst converter: ToXy = (pt: Vp) => {\n\t\treturn { x: Math.round(pt[0] * ft), y: Math.round(pt[1] * ft) };\n\t};\n\n\treturn converter;\n}\n\nexport function toVecFactory(factor = 100_000) {\n\tconst ft = factor;\n\tconst converter: ToVec = (pt) => new Vec(pt.x / ft, pt.y / ft);\n\treturn converter;\n}\n\nexport function toXy(pt: Vp, factor = 100_000): XYPt {\n\treturn { x: Math.round(pt[0] * factor), y: Math.round(pt[1] * factor) };\n}\n\nexport function toVec(pt: XYPt, factor = 100_000): Vp {\n\treturn new Vec(pt.x / factor, pt.y / factor);\n}\n\nexport function toXyLoop(loop: Vp[], factor = 100_000) {\n\tconst converter = toXyFactory(factor);\n\treturn loop.map((p) => converter(p));\n}\n\nexport function toVecLoop(loop: XYPt[], factor = 100_000) {\n\tconst converter = toVecFactory(factor);\n\treturn loop.map((p) => converter(p));\n}\n\nexport function toXyShape(shape: Vp[][], factor = 100_000) {\n\tconst converter = toXyFactory(factor);\n\treturn shape.map((lp) => lp.map((pt) => converter(pt)));\n}\n\nexport function toVecShape(shape: XYPt[][], factor = 100_000) {\n\tconst converter = toVecFactory(factor);\n\treturn shape.map((lp) => lp.map((pt) => converter(pt)));\n}\n"],"mappings":"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","names":[]}