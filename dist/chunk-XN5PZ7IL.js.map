{"version":3,"sources":["../src/main.ts","../src/lib/maths.ts","../src/lib/line.ts","../src/lib/djikstra.ts","../src/lib/pg.ts","../src/lib/path.ts","../src/lib/mat.json","../src/lib/draw.ts","../src/lib/colour.ts"],"sourcesContent":["import { Vec } from './lib/vec';\nimport { range } from 'd3';\nimport { c, maths as m } from './lib';\nconst PI = Math.PI;\nconst TAU = Math.PI * 2;\nconst vec = (x: number, y: number) => new Vec(x, y);\nconst { random, floor, ceil, abs, atan2, sin, cos, tan, min, max, sqrt } = Math;\nconst forExport = {\n\trandom,\n\tfloor,\n\tceil,\n\tabs,\n\trange,\n\tm,\n\tc,\n\tatan2,\n\tsin,\n\tcos,\n\ttan,\n\tmin,\n\tmax,\n\tPI,\n\tTAU,\n\tsqrt,\n\tvec,\n\tlerp: Vec.lerp,\n\tr2d: Vec.rad2deg,\n\td2r: Vec.deg2rad,\n};\nObject.entries(forExport).forEach(([key, value]) => {\n\t(globalThis as any)[key] = value;\n});\ndeclare global {\n\tconst {\n\t\trandom,\n\t\tfloor,\n\t\tceil,\n\t\trange,\n\t\tabs,\n\t\tc,\n\t\tatan2,\n\t\tsin,\n\t\tcos,\n\t\ttan,\n\t\tmin,\n\t\tmax,\n\t\tPI,\n\t\tTAU,\n\t\tsqrt,\n\t\tvec,\n\t\tlerp,\n\t\tr2d,\n\t\td2r,\n\t}: typeof forExport;\n}\nexport * as d3 from 'd3';\n","export * from './matrices';\nexport * from './vec';\nexport * from './xy-point-helpers';\nexport * from './line';\nexport * from './djikstra';\nexport * from './pg';\nexport * from './path';\nexport function mod(diviend: number, divisor: number) {\n\tconst quotiont = Math.floor(diviend / divisor);\n\treturn diviend - divisor * quotiont;\n}\n","import { Vec } from './vec';\n\nconst fractional = (t: number) => t >= 0 && t <= 1;\nenum IntersectionType {\n\toverlap = 'overlap',\n\tintersect = 'intersect',\n\tparallel = 'parallel',\n\tsepperate = 'sepperate',\n}\ntype Overlap = {\n\tkind: IntersectionType.overlap;\n\ttRange: [number, number];\n\tintersects: true;\n};\ntype Intersect = {\n\tkind: IntersectionType.intersect;\n\tpt: Vec;\n\ttFromA: number;\n\tintersects: true;\n};\ntype Parallel = { kind: IntersectionType.parallel; intersects: false };\ntype Sepperate = { kind: IntersectionType.sepperate; intersects: false };\ntype IntersectionResult = Overlap | Intersect | Parallel | Sepperate;\ntype ProjectionResult = { onLine: boolean; t: number; pt: Vec };\nexport class Line {\n\tstart: Vec;\n\tend: Vec;\n\n\tconstructor(a: Vec, b: Vec) {\n\t\tthis.start = a;\n\t\tthis.end = b;\n\t}\n\n\tget vector() {\n\t\treturn this.end.sub(this.start);\n\t}\n\n\tget length() {\n\t\treturn this.vector.len();\n\t}\n\n\tget arr(): [Vec, Vec] {\n\t\treturn [this.start, this.end];\n\t}\n\n\tupdateStart(n: Vec) {\n\t\tthis.start = n.clone();\n\t\treturn this;\n\t}\n\n\tupdateEnd(n: Vec) {\n\t\tthis.end = n.clone();\n\t\treturn this;\n\t}\n\n\tcloneLine() {\n\t\treturn new Line(this.start, this.end);\n\t}\n\n\treverse() {\n\t\tconst temporary = this.start;\n\t\tthis.updateStart(this.end).updateEnd(temporary);\n\t\treturn this;\n\t}\n\n\tintersectionPoint(other: Line): IntersectionResult {\n\t\tconst r = this.vector;\n\t\tconst s = other.vector;\n\t\tconst p = this.start;\n\t\tconst q = other.start;\n\t\tconst diffVec = q.sub(p);\n\t\t// Co-linear case\n\t\tif (r.cross(s) === 0 && q.sub(p).cross(r) === 0) {\n\t\t\t// Lines are colinear\n\t\t\tconst t0 = diffVec.dot(r) / r.dot(r);\n\t\t\tconst t1 = t0 + s.dot(r) / r.dot(r);\n\t\t\tif (s.dot(r) < 0) {\n\t\t\t\tif (t1 > 1 || t0 < 0)\n\t\t\t\t\treturn { kind: IntersectionType.parallel, intersects: false };\n\t\t\t\tconst minPoint = Math.max(0, t1);\n\t\t\t\tconst maxPoint = Math.min(1, t0);\n\t\t\t\treturn {\n\t\t\t\t\tkind: IntersectionType.overlap,\n\t\t\t\t\tintersects: true,\n\t\t\t\t\ttRange: [minPoint, maxPoint],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (t0 > 1 || t1 < 0)\n\t\t\t\treturn { kind: IntersectionType.parallel, intersects: false };\n\t\t\tconst minPoint = Math.max(0, t0);\n\t\t\tconst maxPoint = Math.min(1, t1);\n\t\t\treturn {\n\t\t\t\tkind: IntersectionType.overlap,\n\t\t\t\tintersects: true,\n\t\t\t\ttRange: [minPoint, maxPoint],\n\t\t\t};\n\t\t}\n\n\t\tif (r.cross(s) === 0 && q.sub(p).cross(r) !== 0)\n\t\t\treturn {\n\t\t\t\tkind: IntersectionType.parallel,\n\t\t\t\tintersects: false,\n\t\t\t};\n\t\tconst t = diffVec.cross(s) / r.cross(s);\n\t\tconst u = diffVec.cross(r) / r.cross(s);\n\t\tif (r.cross(s) && fractional(t) && fractional(u))\n\t\t\treturn {\n\t\t\t\tkind: IntersectionType.intersect,\n\t\t\t\tintersects: true,\n\t\t\t\tpt: p.add(r.mul(t)),\n\t\t\t\ttFromA: t,\n\t\t\t};\n\t\treturn { kind: IntersectionType.sepperate, intersects: false };\n\t}\n\n\tprojectPointToLine(point: Vec): ProjectionResult {\n\t\tconst l2 = this.vector.lenSq();\n\t\tconst pStart = point.sub(this.start);\n\t\tconst t = pStart.dot(this.vector) / l2;\n\t\tconst onLine = fractional(t);\n\t\treturn { onLine, t, pt: this.vector.mul(t).add(this.start) };\n\t}\n\n\tminDistToPoint(point: Vec) {\n\t\tconst l2 = this.vector.lenSq();\n\t\tif (l2 === 0) {\n\t\t\treturn point.dist(this.start);\n\t\t}\n\n\t\tconst proj = this.projectPointToLine(point);\n\t\tif (proj.onLine) return point.dist(proj.pt);\n\t\tif (proj.t < 0) return point.dist(this.start);\n\t\treturn point.dist(this.end);\n\t}\n\n\tclockwiseDir() {\n\t\treturn (\n\t\t\t-1 *\n\t\t\tMath.sign(new Vec(0, 1).cross(this.vector)) *\n\t\t\tnew Vec(0, 1).angleBetween(this.vector)\n\t\t);\n\t}\n\n\tisEqualTo(other: Line) {\n\t\treturn (\n\t\t\t(this.start.isEqualTo(other.end) && this.end.isEqualTo(other.start)) ||\n\t\t\t(this.start.isEqualTo(other.start) && this.end.isEqualTo(other.end))\n\t\t);\n\t}\n\n\tclone() {\n\t\treturn new Line(this.start, this.end);\n\t}\n\n\toffsetStart(offset: number) {\n\t\tconst t = this.vector.setLength(offset);\n\t\treturn this.updateStart(this.start.add(t));\n\t}\n\n\toffsetEnd(offset: number) {\n\t\tconst t = this.start.sub(this.end).setLength(offset);\n\t\treturn this.updateEnd(this.end.add(t));\n\t}\n\n\toffsetBoth(offset: number) {\n\t\treturn this.offsetStart(offset).offsetEnd(offset);\n\t}\n}\n","import TinyQueue from 'tinyqueue';\n\nexport type DistanceFunc<T = number> = (from: T, to: T) => number;\nexport type NeighbourFunc<T = number> = (here: T) => Iterable<T>;\n\n/**\n * Djikstras path returns the djikstra's path between two nodes\n * @template T node form\n * @param start starting node\n * @param end ending node\n * @param getNeighbours function that returns neighbours for a node\n * @param [getDistance] function that gets the distance between two nodes, defaults to const 1\n * @returns path\n */\nexport function djikstraPath<T = number>(\n\tstart: T,\n\tend: T,\n\tgetNeighbours: NeighbourFunc<T>,\n\tgetDistance: DistanceFunc<T> = () => 1,\n) {\n\tconst frontier = new TinyQueue<{ v: T; n: number }>(\n\t\tundefined,\n\t\t(a, b) => b.n - a.n,\n\t);\n\tfrontier.push({ v: start, n: 0 });\n\tconst cameFrom = new Map<T, T | null>();\n\tconst distanceTo = new Map<T, number>();\n\tcameFrom.set(start, null);\n\tdistanceTo.set(start, 0);\n\twhile (frontier.length > 0) {\n\t\tconst current = frontier.pop()!.v;\n\t\tif (current === end) {\n\t\t\tbreak;\n\t\t}\n\n\t\tfor (const n of getNeighbours(current)) {\n\t\t\tconst newDistance = distanceTo.get(current)! + getDistance(current, n);\n\t\t\tif (!distanceTo.has(n) || newDistance < distanceTo.get(n)!) {\n\t\t\t\tdistanceTo.set(n, newDistance);\n\t\t\t\tfrontier.push({ n: newDistance, v: n });\n\t\t\t\tcameFrom.set(n, current);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst path = [end];\n\tif (!cameFrom.has(end)) throw new Error('No Route Found');\n\tlet next = cameFrom.get(end);\n\twhile (next !== undefined && next !== null) {\n\t\tpath.unshift(next);\n\t\tnext = cameFrom.get(next);\n\t}\n\n\treturn path;\n}\n","import { polygonCentroid } from 'd3';\n\ntype TDLPT = Array<[number, number]>;\ntype Pt = [number, number];\ntype Loop = Pt[];\nfunction sqr(x: number) {\n\treturn x * x;\n}\n\nfunction dist2(v: Pt, w: Pt) {\n\treturn sqr(v[0] - w[0]) + sqr(v[1] - w[1]);\n}\n\nfunction distToSegmentSquared(p: Pt, v: Pt, w: Pt) {\n\tconst l2 = dist2(v, w);\n\n\tif (l2 === 0) return dist2(p, v);\n\tlet t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\n\n\tt = Math.max(0, Math.min(1, t));\n\n\treturn dist2(p, [v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1])]);\n}\n\nexport function distToSegment(p: Pt, v: Pt, w: Pt) {\n\treturn Math.sqrt(distToSegmentSquared(p, v, w));\n}\n\nexport function minDistFromCentroid(poly: Loop) {\n\tconst c = polygonCentroid(poly as TDLPT);\n\tconst r: number[] = [];\n\n\tfor (let i = 0; i < poly.length; i++) {\n\t\tconst thisP = poly[i];\n\t\tconst nextP = poly[(i + 1) % poly.length];\n\n\t\tr.push(distToSegment(c, thisP, nextP));\n\t}\n\n\treturn Math.min(...r);\n}\n","import { range } from 'd3';\nimport { Vec } from './vec';\nimport { Matrix, matrix, multiply } from 'mathjs';\nimport matrices from './mat.json';\ntype Loop = [number, number][];\ntype SplineType = 'closed' | 'clamped' | 'open';\n\nconst internalMats: Matrix[] = [];\nObject.keys(matrices).forEach((k) => {\n\tconst key = k as keyof typeof matrices;\n\tconst data = matrices[key].data;\n\tconst mat = matrix(data);\n\tinternalMats[Number.parseInt(key, 10)] = mat;\n});\n\nexport function bsplineMat(spline: BasisSpline, t: number) {\n\tif (t >= 1) t = 1;\n\tconst u = t * (spline.knots.length - spline.degree);\n\tconst knotIndex = t === 1 ? u - 1 : Math.floor(u);\n\tconst x = u - knotIndex;\n\tconst sourcePoints = range(spline.degree + 1).map((d) => {\n\t\treturn spline.controlPoints[spline.knots[knotIndex + d]];\n\t});\n\n\treturn matsplineMult(spline.degree, x, sourcePoints);\n}\n\nexport function cubicBSplineToBezierSpline(spline: BasisSpline) {\n\tif (spline.degree !== 3) throw new Error('spline is not degree 3');\n\treturn range(spline.knots.length - 3).map((i) => {\n\t\tconst pts = range(4).map((j) => spline.controlPoints[spline.knots[i + j]]);\n\t\treturn bezierFromCubicBSplineSection(pts);\n\t});\n}\n\nfunction matsplineMult(degree: number, x: number, sourcePoints: Vec[]) {\n\tconst inputMatrix = matrix(range(degree + 1).map((i) => x ** i));\n\tif (internalMats[degree] === undefined) {\n\t\tthrow new Error(`no matrix for degree of ${degree}`);\n\t}\n\n\tconst mat = internalMats[degree];\n\tconst factors = multiply(inputMatrix, mat).toArray() as number[];\n\tconst result = range(degree + 1).reduce((a, b) => {\n\t\treturn a.add(sourcePoints[b].mul(factors[b]));\n\t}, new Vec(0, 0));\n\treturn result;\n}\n\ntype CubicSplineInput = Vec[];\nfunction bezierFromCubicBSplineSection(pts: CubicSplineInput) {\n\tif (pts.length < 4) throw new Error(`input is less then 4`);\n\tconst a = matsplineMult(3, 0, pts);\n\tconst d = matsplineMult(3, 1, pts);\n\tconst b = Vec.lerp(pts[1], pts[2], 1 / 3);\n\tconst c = Vec.lerp(pts[1], pts[2], 2 / 3);\n\treturn [a, b, c, d];\n}\n\nfunction binarySearch(nums: number[], target: number): number {\n\tlet left = 0;\n\tlet right: number = nums.length - 1;\n\tif (nums[left] === target) return 0;\n\twhile (left <= right) {\n\t\tconst mid: number = Math.floor((left + right) / 2);\n\n\t\tif (nums[mid] <= target && nums[mid + 1] > target) return mid;\n\t\tif (target < nums[mid]) right = mid - 1;\n\t\telse left = mid + 1;\n\t}\n\n\treturn -1;\n}\n\nconst lutDepthEnum = {\n\t0: 256,\n\t1: 512,\n\t2: 1024,\n\t3: 2048,\n} as const;\n\ntype LUTDepth = keyof typeof lutDepthEnum;\nclass BasisSpline {\n\tpublic controlPoints: Vec[];\n\tpublic type: SplineType;\n\tpublic knots: number[];\n\tpublic degree: number;\n\tpublic useLUT: boolean;\n\tpublic lut?: number[];\n\tpublic totalLength?: number;\n\tpublic interpolateLut?: (t: number) => number;\n\tpublic depth: number;\n\tconstructor(\n\t\tcps: Loop,\n\t\tdegree: number,\n\t\ttype: SplineType,\n\t\tuseLUT = false,\n\t\tdepth = 0,\n\n\t\tknots?: number[],\n\t) {\n\t\tif (!(depth in lutDepthEnum)) {\n\t\t\tthrow Error('depth is not 0,1,2,3');\n\t\t}\n\t\tthis.type = type;\n\t\tthis.useLUT = useLUT;\n\t\tthis.depth = lutDepthEnum[depth as LUTDepth];\n\t\tthis.degree = degree;\n\t\tthis.controlPoints = cps.map(([x, y]) => new Vec(x, y));\n\t\tconst noPoints = this.controlPoints.length;\n\t\tif (type === 'open') {\n\t\t\tthis.knots = knots || [...range(noPoints)];\n\t\t} else if (type === 'clamped') {\n\t\t\tconst lastIndex = cps.length - 1;\n\n\t\t\tthis.knots = knots || [\n\t\t\t\t...Array.from<number>({ length: degree - 1 }).fill(0),\n\t\t\t\t...range(noPoints),\n\t\t\t\t...Array.from<number>({ length: degree - 1 }).fill(lastIndex),\n\t\t\t];\n\t\t} else {\n\t\t\tthis.knots = knots || [...range(noPoints), ...range(degree)];\n\t\t}\n\n\t\tif (this.useLUT) {\n\t\t\tthis.lut = [] as number[];\n\t\t\tconst distances: number[] = [];\n\t\t\tlet dist = 0;\n\t\t\tlet previous = bsplineMat(this, 0);\n\t\t\tfor (let i = 1; i < this.depth; i++) {\n\t\t\t\tconst t = i / (this.depth - 1);\n\t\t\t\tconst next = bsplineMat(this, t);\n\t\t\t\tconst sum = dist + next.sub(previous).len();\n\t\t\t\tdistances[i] = sum;\n\t\t\t\tdist = sum;\n\t\t\t\tprevious = next;\n\t\t\t}\n\n\t\t\tconst max = distances[this.depth - 1];\n\t\t\tthis.totalLength = max;\n\t\t\tthis.lut = distances.map((dist) => dist / max);\n\t\t\tthis.lut[0] = 0;\n\t\t\tthis.lut[this.depth - 1] = 1;\n\t\t\tconst newLut = [] as number[];\n\t\t\tnewLut[0] = 0;\n\t\t\tconst maxValue = this.depth - 1;\n\t\t\tfor (let i = 1; i < this.depth; i++) {\n\t\t\t\tconst input = i / (this.depth - 1);\n\t\t\t\tlet u = binarySearch(this.lut, input);\n\t\t\t\tif (u === -1) {\n\t\t\t\t\tu = this.depth - 1;\n\t\t\t\t\tnewLut[i] = 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst inputLower = u / maxValue;\n\t\t\t\tconst inputUpper = (u + 1) / maxValue;\n\t\t\t\tconst outputLower = this.lut[u];\n\t\t\t\tconst outputUpper = this.lut[u + 1];\n\t\t\t\tconst output =\n\t\t\t\t\t((input - inputLower) / (inputUpper - inputLower)) *\n\t\t\t\t\t\t(outputUpper - outputLower) +\n\t\t\t\t\toutputLower;\n\t\t\t\tnewLut[i] = output;\n\t\t\t}\n\n\t\t\tnewLut[maxValue] = 1;\n\t\t\tthis.lut = newLut;\n\n\t\t\tthis.interpolateLut = (t: number) => {\n\t\t\t\tif (!this.lut) throw Error('no lut found');\n\t\t\t\tconst lut = this.lut;\n\t\t\t\tif (t === 1) return 1;\n\t\t\t\tconst u = t * (this.depth - 1);\n\t\t\t\tconst a = Math.floor(u);\n\t\t\t\tconst b = a + 1;\n\t\t\t\tconst x = u - a;\n\t\t\t\treturn lut[a] + x * (lut[b] - lut[a]);\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport function bSpline(\n\tcps: Vec[],\n\tdegree: number,\n\tclosed: SplineType = 'clamped',\n\tuseLUT = false,\n\tdepth = 2,\n) {\n\treturn new BasisSpline(cps, degree, closed, useLUT, depth);\n}\n","{\"1\":{\"mathjs\":\"DenseMatrix\",\"data\":[[1,0],[-1,1]],\"size\":[2,2]},\"2\":{\"mathjs\":\"DenseMatrix\",\"data\":[[0.5,0.5,0],[-1,1,0],[0.5,-1,0.5]],\"size\":[3,3]},\"3\":{\"mathjs\":\"DenseMatrix\",\"data\":[[0.16666666666666666,0.6666666666666666,0.16666666666666666,0],[-0.5,0,0.5,0],[0.5,-1,0.5,0],[-0.16666666666666666,0.5,-0.5,0.16666666666666666]],\"size\":[4,4]},\"4\":{\"mathjs\":\"DenseMatrix\",\"data\":[[0.041666666666666664,0.4583333333333333,0.4583333333333333,0.041666666666666664,0],[-0.16666666666666666,-0.5,0.5,0.16666666666666666,0],[0.25,-0.25,-0.25,0.25,0],[-0.16666666666666666,0.5,-0.5,0.16666666666666666,0],[0.041666666666666664,-0.16666666666666666,0.25,-0.16666666666666666,0.041666666666666664]],\"size\":[5,5]},\"5\":{\"mathjs\":\"DenseMatrix\",\"data\":[[0.008333333333333333,0.21666666666666667,0.55,0.21666666666666667,0.008333333333333333,0],[-0.041666666666666664,-0.41666666666666663,0,0.41666666666666663,0.041666666666666664,0],[0.08333333333333333,0.16666666666666666,-0.5,0.16666666666666666,0.08333333333333333,0],[-0.08333333333333333,0.16666666666666666,0,-0.16666666666666666,0.08333333333333333,0],[0.041666666666666664,-0.16666666666666666,0.25,-0.16666666666666666,0.041666666666666664,0],[-0.008333333333333333,0.041666666666666664,-0.08333333333333333,0.08333333333333333,-0.041666666666666664,0.008333333333333333]],\"size\":[6,6]},\"6\":{\"mathjs\":\"DenseMatrix\",\"data\":[[0.001388888888888889,0.07916666666666666,0.41944444444444445,0.41944444444444445,0.07916666666666666,0.001388888888888889,0],[-0.008333333333333333,-0.20833333333333334,-0.3333333333333333,0.3333333333333333,0.20833333333333334,0.008333333333333333,0],[0.020833333333333336,0.18750000000000003,-0.20833333333333337,-0.20833333333333337,0.18750000000000003,0.020833333333333336,0],[-0.02777777777777778,-0.02777777777777778,0.22222222222222224,-0.22222222222222224,0.02777777777777778,0.02777777777777778,0],[0.020833333333333336,-0.0625,0.04166666666666667,0.04166666666666667,-0.0625,0.020833333333333336,0],[-0.008333333333333333,0.041666666666666664,-0.08333333333333333,0.08333333333333333,-0.041666666666666664,0.008333333333333333,0],[0.001388888888888889,-0.008333333333333333,0.020833333333333336,-0.02777777777777778,0.020833333333333336,-0.008333333333333333,0.001388888888888889]],\"size\":[7,7]},\"7\":{\"mathjs\":\"DenseMatrix\",\"data\":[[0.0001984126984126984,0.023809523809523808,0.2363095238095238,0.4793650793650794,0.2363095238095238,0.023809523809523808,0.0001984126984126984,0],[-0.001388888888888889,-0.07777777777777778,-0.3402777777777778,0,0.3402777777777778,0.07777777777777778,0.001388888888888889,0],[0.004166666666666667,0.1,0.0625,-0.3333333333333333,0.0625,0.1,0.004166666666666667,0],[-0.006944444444444444,-0.05555555555555555,0.13194444444444445,0,-0.13194444444444445,0.05555555555555555,0.006944444444444444,0],[0.006944444444444444,0,-0.0625,0.1111111111111111,-0.0625,0,0.006944444444444444,0],[-0.004166666666666667,0.016666666666666666,-0.020833333333333332,0,0.020833333333333332,-0.016666666666666666,0.004166666666666667,0],[0.001388888888888889,-0.008333333333333333,0.020833333333333336,-0.02777777777777778,0.020833333333333336,-0.008333333333333333,0.001388888888888889,0],[-0.0001984126984126984,0.001388888888888889,-0.004166666666666667,0.006944444444444444,-0.006944444444444444,0.004166666666666667,-0.001388888888888889,0.0001984126984126984]],\"size\":[8,8]},\"8\":{\"mathjs\":\"DenseMatrix\",\"data\":[[0.0000248015873015873,0.006125992063492063,0.10647321428571428,0.38737599206349205,0.38737599206349205,0.10647321428571428,0.006125992063492063,0.0000248015873015873,0],[-0.0001984126984126984,-0.02361111111111111,-0.2125,-0.24305555555555555,0.24305555555555555,0.2125,0.02361111111111111,0.0001984126984126984,0],[0.0006944444444444445,0.03819444444444445,0.13125,-0.1701388888888889,-0.1701388888888889,0.13125,0.03819444444444445,0.0006944444444444445,0],[-0.001388888888888889,-0.03194444444444445,0.0125,0.13194444444444445,-0.13194444444444445,-0.0125,0.03194444444444445,0.001388888888888889,0],[0.001736111111111111,0.012152777777777776,-0.046875,0.03298611111111111,0.03298611111111111,-0.046875,0.012152777777777776,0.001736111111111111,0],[-0.001388888888888889,0.001388888888888889,0.0125,-0.034722222222222224,0.034722222222222224,-0.0125,-0.001388888888888889,0.001388888888888889,0],[0.0006944444444444445,-0.0034722222222222225,0.00625,-0.0034722222222222225,-0.0034722222222222225,0.00625,-0.0034722222222222225,0.0006944444444444445,0],[-0.0001984126984126984,0.001388888888888889,-0.004166666666666667,0.006944444444444444,-0.006944444444444444,0.004166666666666667,-0.001388888888888889,0.0001984126984126984,0],[0.0000248015873015873,-0.0001984126984126984,0.0006944444444444445,-0.001388888888888889,0.001736111111111111,-0.001388888888888889,0.0006944444444444445,-0.0001984126984126984,0.0000248015873015873]],\"size\":[9,9]},\"9\":{\"mathjs\":\"DenseMatrix\",\"data\":[[0.0000027557319223985893,0.0013833774250440918,0.04025573192239859,0.24314925044091712,0.4304177689594357,0.24314925044091712,0.04025573192239859,0.0013833774250440918,0.0000027557319223985893,0],[-0.0000248015873015873,-0.006101190476190476,-0.10034722222222223,-0.2809027777777778,0,0.2809027777777778,0.10034722222222223,0.006101190476190476,0.0000248015873015873,0],[0.0000992063492063492,0.011706349206349206,0.09444444444444444,0.015277777777777777,-0.24305555555555555,0.015277777777777777,0.09444444444444444,0.011706349206349206,0.0000992063492063492,0],[-0.0002314814814814815,-0.0125,-0.031018518518518518,0.10046296296296296,0,-0.10046296296296296,0.031018518518518518,0.0125,0.0002314814814814815,0],[0.00034722222222222224,0.0076388888888888895,-0.011111111111111112,-0.029861111111111113,0.06597222222222222,-0.029861111111111113,-0.011111111111111112,0.0076388888888888895,0.00034722222222222224,0],[-0.00034722222222222224,-0.0020833333333333333,0.011805555555555555,-0.015972222222222224,0,0.015972222222222224,-0.011805555555555555,0.0020833333333333333,0.00034722222222222224,0],[0.0002314814814814815,-0.000462962962962963,-0.001851851851851852,0.007870370370370371,-0.011574074074074075,0.007870370370370371,-0.001851851851851852,-0.000462962962962963,0.0002314814814814815,0],[-0.0000992063492063492,0.0005952380952380953,-0.001388888888888889,0.001388888888888889,0,-0.001388888888888889,0.001388888888888889,-0.0005952380952380953,0.0000992063492063492,0],[0.0000248015873015873,-0.0001984126984126984,0.0006944444444444445,-0.001388888888888889,0.001736111111111111,-0.001388888888888889,0.0006944444444444445,-0.0001984126984126984,0.0000248015873015873,0],[-0.0000027557319223985893,0.0000248015873015873,-0.0000992063492063492,0.0002314814814814815,-0.00034722222222222224,0.00034722222222222224,-0.0002314814814814815,0.0000992063492063492,-0.0000248015873015873,0.0000027557319223985893]],\"size\":[10,10]},\"10\":{\"mathjs\":\"DenseMatrix\",\"data\":[[2.755731922398589e-7,0.00027915564373897706,0.01318342151675485,0.12543871252204583,0.36109843474426806,0.36109843474426806,0.12543871252204583,0.01318342151675485,0.00027915564373897706,2.755731922398589e-7,0],[-0.000002755731922398589,-0.001380621693121693,-0.038872354497354496,-0.2028935185185185,-0.1872685185185185,0.1872685185185185,0.2028935185185185,0.038872354497354496,0.001380621693121693,0.000002755731922398589,0],[0.000012400793650793649,0.003038194444444444,0.047123015873015865,0.09027777777777776,-0.14045138888888886,-0.14045138888888886,0.09027777777777776,0.047123015873015865,0.003038194444444444,0.000012400793650793649,0],[-0.000033068783068783064,-0.0038690476190476183,-0.027579365079365075,0.026388888888888885,0.0861111111111111,-0.0861111111111111,-0.026388888888888885,0.027579365079365075,0.0038690476190476183,0.000033068783068783064,0],[0.000057870370370370366,0.0030671296296296293,0.004629629629629629,-0.03287037037037037,0.025115740740740737,0.025115740740740737,-0.03287037037037037,0.004629629629629629,0.0030671296296296293,0.000057870370370370366,0],[-0.00006944444444444444,-0.0014583333333333334,0.00375,0.00375,-0.019166666666666665,0.019166666666666665,-0.00375,-0.00375,0.0014583333333333334,0.00006944444444444444,0],[0.000057870370370370366,0.00028935185185185184,-0.0023148148148148147,0.004629629629629629,-0.002662037037037037,-0.002662037037037037,0.004629629629629629,-0.0023148148148148147,0.00028935185185185184,0.000057870370370370366,0],[-0.000033068783068783064,0.00009920634920634919,0.00019841269841269839,-0.0013888888888888887,0.0027777777777777775,-0.0027777777777777775,0.0013888888888888887,-0.00019841269841269839,-0.00009920634920634919,0.000033068783068783064,0],[0.000012400793650793649,-0.00008680555555555555,0.000248015873015873,-0.0003472222222222222,0.0001736111111111111,0.0001736111111111111,-0.0003472222222222222,0.000248015873015873,-0.00008680555555555555,0.000012400793650793649,0],[-0.000002755731922398589,0.000024801587301587298,-0.00009920634920634919,0.00023148148148148146,-0.0003472222222222222,0.0003472222222222222,-0.00023148148148148146,0.00009920634920634919,-0.000024801587301587298,0.000002755731922398589,0],[2.755731922398589e-7,-0.000002755731922398589,0.000012400793650793649,-0.000033068783068783064,0.000057870370370370366,-0.00006944444444444444,0.000057870370370370366,-0.000033068783068783064,0.000012400793650793649,-0.000002755731922398589,2.755731922398589e-7]],\"size\":[11,11]},\"11\":{\"mathjs\":\"DenseMatrix\",\"data\":[[2.505210838544172e-8,0.000051006092672759345,0.003823878667628668,0.055202020202020204,0.2439602873977874,0.3939255651755652,0.2439602873977874,0.055202020202020204,0.003823878667628668,0.000051006092672759345,2.505210838544172e-8,0],[-2.7557319223985894e-7,-0.00027888007054673725,-0.012904265873015875,-0.11225529100529101,-0.23565972222222226,0,0.23565972222222226,0.11225529100529101,0.012904265873015875,0.00027888007054673725,2.7557319223985894e-7,0],[0.0000013778659611992946,0.0006889329805996473,0.018745866402116403,0.08201058201058202,-0.0078125,-0.18726851851851853,-0.0078125,0.08201058201058202,0.018745866402116403,0.0006889329805996473,0.0000013778659611992946,0],[-0.000004133597883597884,-0.0010085978835978836,-0.014694940476190478,-0.014384920634920636,0.07690972222222223,0,-0.07690972222222223,0.014384920634920636,0.014694940476190478,0.0010085978835978836,0.000004133597883597884,0],[0.000008267195767195768,0.0009589947089947091,0.005927579365079366,-0.013492063492063493,-0.014930555555555556,0.043055555555555555,-0.014930555555555556,-0.013492063492063493,0.005927579365079366,0.0009589947089947091,0.000008267195767195768,0],[-0.000011574074074074075,-0.0006018518518518519,-0.0003125,0.007500000000000001,-0.011597222222222224,0,0.011597222222222224,-0.007500000000000001,0.0003125,0.0006018518518518519,0.000011574074074074075,0],[0.000011574074074074075,0.0002314814814814815,-0.0008680555555555556,0,0.0038194444444444448,-0.006388888888888889,0.0038194444444444448,0,-0.0008680555555555556,0.0002314814814814815,0.000011574074074074075,0],[-0.000008267195767195768,-0.00003306878306878307,0.00037202380952380956,-0.0009920634920634922,0.0010416666666666667,0,-0.0010416666666666667,0.0009920634920634922,-0.00037202380952380956,0.00003306878306878307,0.000008267195767195768,0],[0.000004133597883597884,-0.000016534391534391536,-0.00001240079365079365,0.0001984126984126984,-0.0005208333333333333,0.0006944444444444445,-0.0005208333333333333,0.0001984126984126984,-0.00001240079365079365,-0.000016534391534391536,0.000004133597883597884,0],[-0.0000013778659611992946,0.000011022927689594357,-0.000037202380952380956,0.00006613756613756614,-0.00005787037037037037,0,0.00005787037037037037,-0.00006613756613756614,0.000037202380952380956,-0.000011022927689594357,0.0000013778659611992946,0],[2.7557319223985894e-7,-0.0000027557319223985893,0.000012400793650793652,-0.00003306878306878307,0.00005787037037037038,-0.00006944444444444446,0.00005787037037037038,-0.00003306878306878307,0.000012400793650793652,-0.0000027557319223985893,2.7557319223985894e-7,0],[-2.505210838544172e-8,2.7557319223985894e-7,-0.0000013778659611992946,0.000004133597883597884,-0.000008267195767195768,0.000011574074074074075,-0.000011574074074074075,0.000008267195767195768,-0.000004133597883597884,0.0000013778659611992946,-2.7557319223985894e-7,2.505210838544172e-8]],\"size\":[12,12]},\"12\":{\"mathjs\":\"DenseMatrix\",\"data\":[[2.08767569878681e-9,0.000008523979878146545,0.0009984747441344663,0.0212685824013949,0.1384514665504249,0.3392729502364919,0.3392729502364919,0.1384514665504249,0.0212685824013949,0.0009984747441344663,0.000008523979878146545,2.08767569878681e-9,0],[-2.505210838544172e-8,-0.0000509810405643739,-0.0037728725749559084,-0.05137814153439154,-0.18875826719576722,-0.1499652777777778,0.1499652777777778,0.18875826719576722,0.05137814153439154,0.0037728725749559084,0.0000509810405643739,2.505210838544172e-8,0],[1.3778659611992947e-7,0.0001393022486772487,0.006312692901234569,0.04967551256613757,0.061702215608465616,-0.11782986111111113,-0.11782986111111113,0.061702215608465616,0.04967551256613757,0.006312692901234569,0.0001393022486772487,1.3778659611992947e-7,0],[-4.592886537330982e-7,-0.000229185038212816,-0.006018977807172252,-0.021088238536155202,0.02994102733686067,0.059818672839506176,-0.059818672839506176,-0.02994102733686067,0.021088238536155202,0.006018977807172252,0.000229185038212816,4.592886537330982e-7,0],[0.000001033399470899471,0.00025111607142857146,0.0034215856481481484,-0.00007750496031746033,-0.022823660714285716,0.019227430555555557,0.019227430555555557,-0.022823660714285716,-0.00007750496031746033,0.0034215856481481484,0.00025111607142857146,0.000001033399470899471,0],[-0.0000016534391534391535,-0.00019014550264550266,-0.0009937169312169312,0.0038839285714285716,0.0002876984126984127,-0.011597222222222222,0.011597222222222222,-0.0002876984126984127,-0.0038839285714285716,0.0009937169312169312,0.00019014550264550266,0.0000016534391534391535,0],[0.0000019290123456790124,0.00009837962962962963,-0.00004822530864197531,-0.0013020833333333333,0.0031828703703703706,-0.0019328703703703704,-0.0019328703703703704,0.0031828703703703706,-0.0013020833333333333,-0.00004822530864197531,0.00009837962962962963,0.0000019290123456790124,0],[-0.0000016534391534391535,-0.00003141534391534392,0.00015707671957671958,-0.0001240079365079365,-0.0005456349206349206,0.0014583333333333334,-0.0014583333333333334,0.0005456349206349206,0.0001240079365079365,-0.00015707671957671958,0.00003141534391534392,0.0000016534391534391535,0],[0.000001033399470899471,0.0000031001984126984127,-0.00005063657407407408,0.00017051091269841272,-0.00025421626984126986,0.00013020833333333333,0.00013020833333333333,-0.00025421626984126986,0.00017051091269841272,-0.00005063657407407408,0.0000031001984126984127,0.000001033399470899471,0],[-4.592886537330982e-7,0.000002296443268665491,-4.592886537330982e-7,-0.000023423721340388008,0.00007991622574955909,-0.00013503086419753088,0.00013503086419753088,-0.00007991622574955909,0.000023423721340388008,4.592886537330982e-7,-0.000002296443268665491,4.592886537330982e-7,0],[1.3778659611992947e-7,-0.0000012400793650793653,0.000004822530864197532,-0.00001033399470899471,0.000012400793650793652,-0.000005787037037037038,-0.000005787037037037038,0.000012400793650793652,-0.00001033399470899471,0.000004822530864197532,-0.0000012400793650793653,1.3778659611992947e-7,0],[-2.505210838544172e-8,2.7557319223985894e-7,-0.0000013778659611992946,0.000004133597883597884,-0.000008267195767195768,0.000011574074074074075,-0.000011574074074074075,0.000008267195767195768,-0.000004133597883597884,0.0000013778659611992946,-2.7557319223985894e-7,2.505210838544172e-8,0],[2.08767569878681e-9,-2.505210838544172e-8,1.3778659611992947e-7,-4.592886537330982e-7,0.000001033399470899471,-0.0000016534391534391535,0.0000019290123456790124,-0.0000016534391534391535,0.000001033399470899471,-4.592886537330982e-7,1.3778659611992947e-7,-2.505210838544172e-8,2.08767569878681e-9]],\"size\":[13,13]}}","import { path } from 'd3';\nimport { bSpline, bsplineMat } from './path';\ntype BSpline = ReturnType<typeof bSpline>;\ntype Path = ReturnType<typeof path>;\ntype Drawable =\n\t| Path\n\t| CanvasRenderingContext2D\n\t| OffscreenCanvasRenderingContext2D;\ntype TDPT = [number, number];\ntype Line = [TDPT, TDPT];\nexport type Loop = TDPT[];\nexport type Shape = Loop[];\ntype Pt = TDPT | number[];\ntype XYPt = { x: number; y: number };\nexport const PI = Math.PI;\nexport const TAU = 2 * Math.PI;\nconst sqrt = Math.sqrt;\nconst EPSILON = 1e-12;\nexport function equivilant(a: number, b: number) {\n\treturn Math.abs(a - b) < EPSILON;\n}\n\nexport function rndm(): number;\nexport function rndm(max: number): number;\nexport function rndm(min: number, max: number): number;\nexport function rndm(...args: number[]) {\n\tif (args[0] === undefined) {\n\t\treturn Math.random();\n\t}\n\n\tif (args[1] === undefined) {\n\t\treturn args[0] * Math.random();\n\t}\n\n\treturn args[0] + Math.random() * (args[1] - args[0]);\n}\n\nexport function flr(value: number): number {\n\treturn Math.floor(value);\n}\n\nfunction lengthAr(a: [number, number], b: [number, number]): number {\n\tconst xDist = (b[0] - a[0]) ** 2;\n\tconst yDist = (b[1] - a[1]) ** 2;\n\n\treturn sqrt(xDist + yDist);\n}\n\nfunction lenxy(a: XYPt, b: XYPt): number {\n\tconst xDist = (b.x - a.x) ** 2;\n\tconst yDist = (b.y - a.y) ** 2;\n\n\treturn sqrt(xDist + yDist);\n}\n\nfunction isXYPt(a: XYPt | Pt): a is XYPt {\n\treturn (a as XYPt).x !== undefined;\n}\n\nexport function length<T extends XYPt | Pt>(a: T, b: T) {\n\tif (isXYPt(a) && isXYPt(b)) {\n\t\treturn lenxy(a, b);\n\t}\n\n\treturn lengthAr(a as [number, number], b as [number, number]);\n}\n\nexport function sub(a: Pt, b: Pt): Pt {\n\treturn [a[0] - b[0], a[1] - b[1]];\n}\n\nfunction isCtx(\n\tctx: Drawable,\n): ctx is CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D {\n\tif (typeof window === 'undefined') return false;\n\n\treturn ctx instanceof CanvasRenderingContext2D;\n}\n\nexport function drawLine(line: Line, ctx: Path): string;\nexport function drawLine(\n\tline: Line,\n\tctx?: CanvasRenderingContext2D,\n): void | string;\nexport function drawLine(\n\tline: Line,\n\tctx: Drawable = typeof window !== 'undefined' &&\n\t'ctx' in window &&\n\twindow.ctx instanceof OffscreenCanvasRenderingContext2D\n\t\t? window.ctx\n\t\t: path(),\n) {\n\tctx.moveTo(...(line[0] as TDPT));\n\tctx.lineTo(...(line[1] as TDPT));\n\tif (!isCtx(ctx)) {\n\t\treturn ctx.toString();\n\t}\n}\n\nexport function drawLoop(\n\tloop: Loop | Iterable<Pt>,\n\tclose: boolean,\n\tctx: Path,\n): string;\nexport function drawLoop(\n\tloop: Loop | Iterable<Pt>,\n\tclose: boolean,\n\tctx?: CanvasRenderingContext2D,\n\tdrawType?: 'fill' | 'stroke',\n): void | string;\nexport function drawLoop(\n\tloop: Loop | Iterable<Pt>,\n\tclose: boolean,\n\tctx: Drawable = typeof window !== 'undefined' &&\n\t'ctx' in window &&\n\twindow.ctx instanceof OffscreenCanvasRenderingContext2D\n\t\t? window.ctx\n\t\t: path(),\n\tdrawType?: 'fill' | 'stroke',\n) {\n\tlet count = 0;\n\n\tfor (const point of loop) {\n\t\tif (count < 1) ctx.moveTo(...(point as TDPT));\n\t\telse ctx.lineTo(...(point as TDPT));\n\t\tcount++;\n\t}\n\n\tif (close) ctx.closePath();\n\tif (isCtx(ctx) && drawType === 'fill') ctx.fill();\n\tif (isCtx(ctx) && drawType === 'stroke') ctx.stroke();\n\tif (!isCtx(ctx)) return ctx.toString();\n}\n\nexport function drawBezierLoop(loop: Loop, close: boolean, ctx: Path): string;\nexport function drawBezierLoop(\n\tloop: Loop,\n\tclose: boolean,\n\tctx?: CanvasRenderingContext2D,\n\tdrawType?: 'fill' | 'stroke',\n): void | string;\nexport function drawBezierLoop(\n\tloop: Loop,\n\tclose: boolean,\n\tctx: Drawable = typeof window !== 'undefined' &&\n\t'ctx' in window &&\n\twindow.ctx instanceof OffscreenCanvasRenderingContext2D\n\t\t? window.ctx\n\t\t: path(),\n\tdrawType?: 'fill' | 'stroke',\n) {\n\tfor (let i = 0; i <= loop.length - 3; i += 4) {\n\t\tif (i === 0) ctx.moveTo(...(loop[0] as TDPT));\n\t\telse ctx.lineTo(...(loop[i] as TDPT));\n\t\tctx.bezierCurveTo(\n\t\t\tloop[i + 1][0],\n\t\t\tloop[i + 1][1],\n\t\t\tloop[i + 2][0],\n\t\t\tloop[i + 2][1],\n\t\t\tloop[i + 3][0],\n\t\t\tloop[i + 3][1],\n\t\t);\n\t}\n\n\tif (close) ctx.closePath();\n\tif (isCtx(ctx) && drawType === 'fill') ctx.fill();\n\tif (isCtx(ctx) && drawType === 'stroke') ctx.stroke();\n\tif (!isCtx(ctx)) return ctx.toString();\n}\n\nexport function drawShape(shape: Shape, ctx: Path): string;\nexport function drawShape(\n\tshape: Shape,\n\tctx?: CanvasRenderingContext2D,\n\tdrawType?: 'fill' | 'stroke',\n): void | string;\nexport function drawShape(\n\tshape: Shape,\n\tctx: Drawable = typeof window !== 'undefined' &&\n\t'ctx' in window &&\n\twindow.ctx instanceof OffscreenCanvasRenderingContext2D\n\t\t? window.ctx\n\t\t: path(),\n\tdrawType?: 'fill' | 'stroke',\n) {\n\tif (isCtx(ctx)) ctx.beginPath();\n\tfor (const loop of shape) drawLoop(loop, true, ctx);\n\tif (isCtx(ctx) && drawType === 'fill') ctx.fill();\n\tif (isCtx(ctx) && drawType === 'stroke') ctx.stroke();\n\tif (!isCtx(ctx)) return ctx.toString();\n}\n\nexport function drawBezierShape(shape: Shape, ctx?: Path): string;\nexport function drawBezierShape(\n\tshape: Shape,\n\tctx: CanvasRenderingContext2D,\n\tdrawType?: 'fill' | 'stroke',\n): void;\nexport function drawBezierShape(\n\tshape: Shape,\n\tctx: Drawable = path(),\n\tdrawType?: 'fill' | 'stroke',\n) {\n\tif (isCtx(ctx)) ctx.beginPath();\n\tfor (const loop of shape) drawBezierLoop(loop, true, ctx);\n\tif (isCtx(ctx) && drawType === 'fill') ctx.fill();\n\tif (isCtx(ctx) && drawType === 'stroke') ctx.stroke();\n\tif (!isCtx(ctx)) return ctx.toString();\n}\n\nexport function drawDot(\n\tpoint: Pt,\n\tradius: number,\n\tctx = typeof window !== 'undefined' &&\n\t'ctx' in window &&\n\twindow.ctx instanceof OffscreenCanvasRenderingContext2D\n\t\t? window.ctx\n\t\t: undefined,\n\tdrawType?: 'fill' | 'stroke',\n) {\n\tconst [x, y] = point;\n\tif (!ctx) throw Error('no context found');\n\tctx.beginPath();\n\tctx.ellipse(x, y, radius, radius, 0, 0, TAU);\n\tctx.closePath();\n\tif (isCtx(ctx) && drawType === 'fill') ctx.fill();\n\tif (isCtx(ctx) && drawType === 'stroke') ctx.stroke();\n}\n\n// ? FUTURE ABILITY Solve the equation to generate a mid point from the 2nd last point and the 2nd point for a closing loop\nexport function drawFauxQuadLoop(\n\tloop: Loop,\n\tclose: boolean,\n\tctx?: Path,\n): string;\nexport function drawFauxQuadLoop(\n\tloop: Loop,\n\tclose: boolean,\n\tctx: CanvasRenderingContext2D,\n): void;\nexport function drawFauxQuadLoop(\n\tloop: Loop,\n\tclose: boolean,\n\tctx: Drawable = path(),\n) {\n\tconst toDraw = loop.slice();\n\tconst ptsNo = toDraw.length;\n\n\tif (close && ptsNo % 2)\n\t\tthrow new Error(\n\t\t\t`in order to close a Faux quad loop, there needs to be an even number of input points. ${ptsNo} points where put in`,\n\t\t);\n\tif (!close && !(ptsNo % 2))\n\t\tthrow new Error(\n\t\t\t`in order to draw a open Faux quad loop, there needs to be an odd number of input points. ${ptsNo} points where put in`,\n\t\t);\n\tconst start = toDraw.shift() as [number, number];\n\n\tif (close) toDraw.push(start);\n\tctx.moveTo(...start);\n\tfor (let i = 0; i < toDraw.length; i += 2) {\n\t\tconst [x1, y1, x2, y2] = [...toDraw[i], ...toDraw[i + 1]];\n\n\t\tctx.quadraticCurveTo(x1, y1, x2, y2);\n\t}\n\n\tif (!isCtx(ctx)) return ctx.toString();\n}\n\nexport function drawFauxCubicLoop(\n\tloop: Loop,\n\tclose: boolean,\n\tctx?: Path,\n): string;\nexport function drawFauxCubicLoop(\n\tloop: Loop,\n\tclose: boolean,\n\tctx: CanvasRenderingContext2D,\n): void;\nexport function drawFauxCubicLoop(\n\tloop: Loop,\n\tclose: boolean,\n\tctx: Drawable = path(),\n) {\n\tconst toDraw = loop.slice();\n\tconst inputLength = toDraw.length;\n\tconst start = toDraw.shift() as [number, number];\n\n\tif (close) toDraw.push(start);\n\tctx.moveTo(...start);\n\tlet lasti = 0;\n\n\tfor (let i = 0; i < inputLength - 2; i++) {\n\t\tconst [x1, y1, x2, y2, x3, y3] = [\n\t\t\t...toDraw[i],\n\t\t\t...toDraw[i + 1],\n\t\t\t...toDraw[i + 2],\n\t\t];\n\n\t\tctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n\t\tlasti = i + 3;\n\t}\n\n\tlet x1: number;\n\tlet y1: number;\n\tlet x2: number;\n\tlet y2: number;\n\tswitch (inputLength - lasti) {\n\t\tcase 1:\n\t\t\tctx.lineTo(...(toDraw[lasti] as TDPT));\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\t[x1, y1] = toDraw[lasti];\n\t\t\t[x2, y2] = toDraw[lasti + 1];\n\n\t\t\tctx.quadraticCurveTo(x1, y1, x2, y2);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\tif (!isCtx(ctx)) return ctx.toString();\n}\n\nexport function drawBSpline(\n\tspline: BSpline,\n\tctx: Drawable,\n\tresolution = spline.controlPoints.length * 10,\n) {\n\tconst start = bsplineMat(spline, 0);\n\tctx.moveTo(start.x, start.y);\n\tfor (let i = 1; i <= resolution; i++) {\n\t\tconst t = i / resolution;\n\t\tconst pt = bsplineMat(spline, t);\n\t\tctx.lineTo(pt.x, pt.y);\n\t}\n\n\tif (spline.type === 'closed') ctx.closePath();\n}\n","export const red = '#ff6188';\nexport const purple = '#ab9df2';\nexport const blue = '#78dce8';\nexport const orange = '#fc9867';\nexport const yellow = '#ffd866';\nexport const green = '#a9dc76';\nexport const grey = '#939293';\nexport const black = '#2d2a2e';\nexport const white = '#fcfcfa';\nexport const fullWhite = '#ffffff';\nexport const fullBlack = '#000000';\nexport const deepBlue = '#6796e6';\nexport const deepRed = '#f44747';\nexport const deepPurple = '#b267e6';\nexport const lightGrey = '#727072';\nexport const silver = '#c1c0c0';\nexport const plastic = {\n\tblack: '#181A1F',\n\tgrey: '#5F6672',\n\twhite: '#A9B2C3',\n\tred: '#E06C75',\n\tyellow: '#E5C07B',\n\tgreen: '#98C379',\n\tcyan: '#56B6C2',\n\tblue: '#61AFEF',\n\tpurple: '#B57EDC',\n};\n"],"mappings":"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","names":["range","minPoint","maxPoint","path","max","dist","x1","y1","x2","y2","PI","TAU","sqrt","range"]}