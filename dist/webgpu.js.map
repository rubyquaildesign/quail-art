{"version":3,"sources":["../src/webgpu.ts"],"sourcesContent":["/// <reference types=\"@webgpu/types\" />\nimport './main';\nif (!(navigator.gpu && navigator.gpu.requestAdapter)) {\n\talert('browser does not support WebGPU');\n\tthrow new Error('no adapter found');\n}\nconst adapter = await navigator.gpu.requestAdapter({\n\tpowerPreference: 'high-performance',\n});\nconst presentationFormat = navigator.gpu.getPreferredCanvasFormat();\nif (!adapter) {\n\talert('browser does not support WebGPU');\n\tthrow new Error('no adapter found');\n}\nconst device = await adapter.requestDevice({\n\trequiredFeatures: ['bgra8unorm-storage'],\n});\nif (!device) {\n\talert('browser does not support WebGPU');\n\tthrow new Error('no adapter found');\n}\nconst canvas = document.querySelector<HTMLCanvasElement>('#canvas')!;\nconst ctx = canvas.getContext('webgpu')!;\nif (!ctx) {\n\talert('browser does not support WebGPU');\n\tthrow new Error('no adapter found');\n}\nctx.configure({\n\tdevice,\n\tformat: presentationFormat,\n\talphaMode: 'opaque',\n\tcolorSpace: 'srgb',\n\tusage:\n\t\tGPUTextureUsage.STORAGE_BINDING |\n\t\tGPUTextureUsage.RENDER_ATTACHMENT |\n\t\tGPUTextureUsage.COPY_DST,\n});\nconst sampleCount = 1;\nlet renderTarget: GPUTexture;\nlet renderTargetView: GPUTextureView;\nlet depthTexture: GPUTexture;\nlet depthTargetView: GPUTextureView;\n\nexport const resizeForDisplay = (chosenWidth: number, chosenHeight: number) => {\n\tconst width = Math.max(\n\t\t1,\n\t\tMath.min(device.limits.maxTextureDimension2D, chosenWidth),\n\t);\n\tconst height = Math.max(\n\t\t1,\n\t\tMath.min(device.limits.maxTextureDimension2D, chosenHeight),\n\t);\n\n\tconst needResize =\n\t\t!renderTarget || width !== chosenWidth || height !== chosenHeight;\n\n\tif (renderTarget) {\n\t\trenderTarget.destroy();\n\t}\n\tif (depthTexture) {\n\t\tdepthTexture.destroy();\n\t}\n\tcanvas.width = width;\n\tcanvas.height = height;\n\n\tconst newRenderTarget = device.createTexture({\n\t\tsize: [canvas.width, canvas.height],\n\t\tformat: presentationFormat,\n\t\tsampleCount,\n\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,\n\t});\n\trenderTarget = newRenderTarget;\n\trenderTargetView = newRenderTarget.createView();\n\tconst newDepthTexture = device.createTexture({\n\t\tsize: [canvas.width, canvas.height],\n\t\tformat: 'depth24plus',\n\t\tsampleCount,\n\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT,\n\t});\n\tdepthTexture = newDepthTexture;\n\tdepthTargetView = newDepthTexture.createView();\n\tconst forExport = {\n\t\twidth,\n\t\theight,\n\t\tr: min(width, height),\n\t\tcanvas,\n\t\tctx,\n\t\tdevice,\n\t\tadapter,\n\t\tqueue: device.queue,\n\t\tpresentationFormat,\n\t} as const;\n\tObject.entries(forExport).forEach(([key, value]) => {\n\t\t(globalThis as any)[key] = value;\n\t});\n\n\t(globalThis as any).renderTarget = renderTarget;\n\t(globalThis as any).renderTargetView = renderTargetView;\n\t(globalThis as any).depthTexture = depthTexture;\n\t(globalThis as any).depthTargetView = depthTargetView;\n\treturn needResize;\n};\nresizeForDisplay(canvas.width, canvas.height);\ndeclare global {\n\tlet renderTarget: GPUTexture;\n\tlet renderTargetView: GPUTextureView;\n\tlet depthTexture: GPUTexture;\n\tlet depthTargetView: GPUTextureView;\n}\n\ndeclare global {\n\tconst width: number;\n\tconst height: number;\n\tconst r: number;\n\tconst canvas: HTMLCanvasElement;\n\tconst ctx: GPUCanvasContext;\n\tconst device: GPUDevice;\n\tconst queue: GPUQueue;\n\tconst adapter: GPUAdapter;\n\tconst presentationFormat: GPUTextureFormat;\n}\n\nexport * from 'webgpu-utils';\n"],"mappings":";;;;AA0HA,cAAc;AAxHd,IAAI,EAAE,UAAU,OAAO,UAAU,IAAI,iBAAiB;AACrD,QAAM,iCAAiC;AACvC,QAAM,IAAI,MAAM,kBAAkB;AACnC;AACA,IAAM,UAAU,MAAM,UAAU,IAAI,eAAe;AAAA,EAClD,iBAAiB;AAClB,CAAC;AACD,IAAM,qBAAqB,UAAU,IAAI,yBAAyB;AAClE,IAAI,CAAC,SAAS;AACb,QAAM,iCAAiC;AACvC,QAAM,IAAI,MAAM,kBAAkB;AACnC;AACA,IAAM,SAAS,MAAM,QAAQ,cAAc;AAAA,EAC1C,kBAAkB,CAAC,oBAAoB;AACxC,CAAC;AACD,IAAI,CAAC,QAAQ;AACZ,QAAM,iCAAiC;AACvC,QAAM,IAAI,MAAM,kBAAkB;AACnC;AACA,IAAM,SAAS,SAAS,cAAiC,SAAS;AAClE,IAAM,MAAM,OAAO,WAAW,QAAQ;AACtC,IAAI,CAAC,KAAK;AACT,QAAM,iCAAiC;AACvC,QAAM,IAAI,MAAM,kBAAkB;AACnC;AACA,IAAI,UAAU;AAAA,EACb;AAAA,EACA,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,OACC,gBAAgB,kBAChB,gBAAgB,oBAChB,gBAAgB;AAClB,CAAC;AACD,IAAM,cAAc;AACpB,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEG,IAAM,mBAAmB,CAAC,aAAqB,iBAAyB;AAC9E,QAAM,QAAQ,KAAK;AAAA,IAClB;AAAA,IACA,KAAK,IAAI,OAAO,OAAO,uBAAuB,WAAW;AAAA,EAC1D;AACA,QAAM,SAAS,KAAK;AAAA,IACnB;AAAA,IACA,KAAK,IAAI,OAAO,OAAO,uBAAuB,YAAY;AAAA,EAC3D;AAEA,QAAM,aACL,CAAC,gBAAgB,UAAU,eAAe,WAAW;AAEtD,MAAI,cAAc;AACjB,iBAAa,QAAQ;AAAA,EACtB;AACA,MAAI,cAAc;AACjB,iBAAa,QAAQ;AAAA,EACtB;AACA,SAAO,QAAQ;AACf,SAAO,SAAS;AAEhB,QAAM,kBAAkB,OAAO,cAAc;AAAA,IAC5C,MAAM,CAAC,OAAO,OAAO,OAAO,MAAM;AAAA,IAClC,QAAQ;AAAA,IACR;AAAA,IACA,OAAO,gBAAgB,oBAAoB,gBAAgB;AAAA,EAC5D,CAAC;AACD,iBAAe;AACf,qBAAmB,gBAAgB,WAAW;AAC9C,QAAM,kBAAkB,OAAO,cAAc;AAAA,IAC5C,MAAM,CAAC,OAAO,OAAO,OAAO,MAAM;AAAA,IAClC,QAAQ;AAAA,IACR;AAAA,IACA,OAAO,gBAAgB;AAAA,EACxB,CAAC;AACD,iBAAe;AACf,oBAAkB,gBAAgB,WAAW;AAC7C,QAAM,YAAY;AAAA,IACjB;AAAA,IACA;AAAA,IACA,GAAG,IAAI,OAAO,MAAM;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO,OAAO;AAAA,IACd;AAAA,EACD;AACA,SAAO,QAAQ,SAAS,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACnD,IAAC,WAAmB,GAAG,IAAI;AAAA,EAC5B,CAAC;AAED,EAAC,WAAmB,eAAe;AACnC,EAAC,WAAmB,mBAAmB;AACvC,EAAC,WAAmB,eAAe;AACnC,EAAC,WAAmB,kBAAkB;AACtC,SAAO;AACR;AACA,iBAAiB,OAAO,OAAO,OAAO,MAAM;","names":[]}